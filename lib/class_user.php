<?php  if (!defined("_VALID_PHP"))      die('Direct access to this location is not allowed.');	date_default_timezone_set('Europe/Tallinn');  class User  {	  public $logged_in = null;	  public $uid = 0;	  public $userid = 0;      public $email;	  public $sesid;	  public $name;	  private $lastlogin = "NOW()";            /**        * Users::__construct()       *        * @return       */      function __construct()      {		  $this->getUserId();		  $this->startSession();      }	  /**	   * Users::getUserId()	   * 	   * @return	   */	  private function getUserId()	  {	  	  global $core, $DEBUG;		  if (isset($_GET['userid'])) {			  $userid = (is_numeric($_GET['userid']) && $_GET['userid'] > -1) ? intval($_GET['userid']) : false;			  $userid = sanitize($userid);			  			  if ($userid == false) {				  $DEBUG == true ? $core->error("You have selected an Invalid Id", "Users::getUserId()") : $core->ooops();			  } else				  return $this->userid = $userid;		  }	  }        /**       * Users::startSession()       *        * @return       */      private function startSession()      {  		if (strlen(session_id()) < 1)			session_start();				$this->logged_in = $this->loginCheck();					if (!$this->logged_in) {			$this->email = $_SESSION['email'] = "0";			$this->sesid = sha1(session_id());			$_SESSION["sesid"] = $this->sesid;		}      }	  /**	   * Users::loginCheck()	   * 	   * @return	   */	  private function loginCheck()	  {		global $db;          if (isset($_SESSION['email']) && $_SESSION['email'] != "0") {                            $row = $this->getUserInfo($_SESSION['email']);			  $this->uid = $row['id'];			  $this->email = $row['email'];			  $this->fname = $row['fname'];			  $this->lname = $row['lname'];			  $this->admin = $row['is_admin']; 			  $this->name = $row['fname'] . ' ' . $row["lname"];			  $this->sesid = sha1(session_id());			  $_SESSION["sesid"] = $this->sesid;				  			  $brand = $this->getBrandInfo($this->uid);				  $this->brandId = $brand['id'];			  $this->brandName = $brand['name'];			  $this->brandSlug = $brand['slug'];			  $this->brandDesc = $brand['description'];			  			return true;          } else {              return false;          }  	  }	  /**	   * Users::checkStatus()	   * 	   * @param mixed $email	   * @param mixed $password	   * @return	   */	  public function checkStatus($email, $password)	  {		  global $db;		  		  $email = sanitize($email);		  $email = $db->escape($email);		  $password = sanitize($password);		            $sql = "SELECT id,password FROM user"		  . "\n WHERE email = '".$email."'";          $result = $db->query($sql);		  $row = $db->fetch($result);		  $entered_pass = sha1($password);		  if ($db->numrows($result) == 0) {			  $data["number"] = 0;			  $data["msg"] = "Ah, mida sul pole kasutajat registeeritud ju!";		  } else 		  if ($entered_pass != $row["password"]) {			  $data["number"] = 0;			  $data["msg"] = "Su parool on täiesti vale!";					  }  else 		  if ($entered_pass == $row["password"]) {			  $data["number"] = 1;			  $data["msg"] = "Nonii nüüd sisselogitud";					  } 		  return $data;	  }		/**	   * Users::LoginForm()	   * @return	   */	  public function LoginForm($email,$password) {		  global $db, $core;						$status = $this->checkStatus($email, $password);			if ($status["number"] == 0) {				$e = $status["msg"];			} 		  if (empty($e) && $status["number"] == 1 ) {			$row = $this->getUserInfo($email);			$this->uid = $_SESSION['uid'] = $row['id'];			$this->email = $_SESSION['email'] = $row['email'];						$result["success"] = "1";			$result["user_id"] = $this->uid;			$result["msg"] = "success";			echo json_encode($result,true);		  } else {			  $result["success"] = "0";			  $result["msg"] = $e;			  echo json_encode($result,true);		  }	  }	        /**       * Users::logout()       *        * @return       */      public function logout()      {          unset($_SESSION['email']);		  unset($_SESSION['email']);		  unset($_SESSION['name']);          unset($_SESSION['uid']);          session_destroy();		  session_regenerate_id();                    $this->logged_in = false;          $this->email = "Guest";          $this->userlevel = 0;      }	  /**	   * Users::getUserInfo()	   * 	   * @param mixed $email	   * @return	   */	  private function getUserInfo($email)	  {		  global $db;		  $email = sanitize($email);		  $email = $db->escape($email);		  		  $sql = "SELECT * FROM user WHERE email = '" . $email . "'";		  $row = $db->first($sql);		  if (!$email)			  return false;		  		  return ($row) ? $row : 0;	  }	  /**	   * Users::getBrandInfo()	   * 	   * @param mixed $email	   * @return	   */	  private function getBrandInfo($uid)	  {		  global $db;		  $uid = sanitize($uid);		  $uid = $db->escape($uid);		  		  $sql = "SELECT * FROM brand WHERE user_id = '" . $uid . "'";		  $row = $db->first($sql);		  if (!$uid)			  return false;		  		  return ($row) ? $row : 0;	  }	  	  /**	   * User::BrandRegister()	   * 	   * @return	   */	  public function BrandRegister() {		global $db,$core;				$pwd = sha1($_POST["password"]);				$data = array(			"fname" => $_POST["fname"],			"lname" => $_POST["lname"],			"email" => $_POST["email"],			"password" => $pwd,			"active" => "0"		);		$id = $db->insert("user",$data);				$data = array(			"user_id" => $id,			"name" => $_POST["brandName"],			"description" => $_POST["brandDesc"],			"slug" => $_POST["brandUrl"],			"companyName" => $_POST["companyName"],			"companyRegCode" => $_POST["companyRegCode"],			"companyAddress" => $_POST["companyAddress"],			"companyEmail" => $_POST["companyEmail"],			"companyPhone" => $_POST["companyPhone"]		);		$db->insert("brand",$data);		$this->uid = $_SESSION['uid'] = $id;		$this->email = $_SESSION['email'] = $_POST['email'];		$this->fname = $_SESSION['fname'] = $_POST["fname"];		$this->lname = $_SESSION['lname'] = $_POST["lname"];		$this->name = $_SESSION['name'] = $_POST["fname"] . ' ' . $_POST["lname"];					$result["url"] = $core->site_url.$_POST["brandUrl"];		$result["success"] = "1";		echo json_encode($result);	  }  	  /**	   * Users::getUniqueCode()	   * 	   * @param string $length	   * @return	   */	  private function getUniqueCode($length = "")	  {		  $code = md5(uniqid(rand(), true));		  if ($length != "") {			  return substr($code, 0, $length);		  } else			  return $code;	  }	  /**	   * Users::generateRandID()	   * 	   * @return	   */	  private function generateRandID()	  {		  return sha1($this->getUniqueCode(24));	  }	  /**	   * Users::generateHash()	   * 	   * @return	   */	  public function generateHash()	  {		  $hash = sha1($this->getUniqueCode(10));		  return $hash;	  }	  	  }	?>